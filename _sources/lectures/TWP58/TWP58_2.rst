Clase = fábrica de objetos
==========================


.. image:: ../img/TWP58_006.jpg
   :height: 12.514cm
   :width: 22.7cm
   :align: center
   :alt: 


.. image:: ../img/TWP58_007.jpg
   :height: 9.471cm
   :width: 22.647cm
   :align: center
   :alt: 


Clase SoundPanel
----------------

.. activecode:: lect_58_2_es
   :nocodelens:
   :language: python3
   :python3_interpreter: brython

   from browser import document, html

   class PanelSonido:  # Panel de Sonido (Sound Panel)
      def __init__(self, archivo_sonido):  # Archivo de Sonido (Sound File)
          self.archivo_sonido = archivo_sonido
          self.pista = html.AUDIO(src=archivo_sonido)
          self.reproduciendo = False
          self.volumen = 1.0

      def alternar_pista(self, ev):  # Alternar Pista (Track Toggle)
          if self.reproduciendo:
              self.pista.pause()
              print("Deteniendo:", self.archivo_sonido)
          else:
              self.pista.play()
              print("Reproduciendo:", self.archivo_sonido)
          self.reproduciendo = not self.reproduciendo

      def cambiar_volumen(self, ev):  # Cambiar Volumen (Change Volume)
          self.volumen = float(ev.target.value)
          self.pista.volume = self.volumen
          print("Volumen cambiado a:", self.volumen)

   contenedor_app = html.DIV(id='app')  # Contenedor de la Aplicación (App Container)

   panel_sonido = PanelSonido('https://bigsoundbank.com/UPLOAD/mp3/0751.mp3')

   boton_pista = html.INPUT(type='checkbox')
   boton_pista.bind('change', panel_sonido.alternar_pista)

   etiqueta_pista = html.LABEL('Reproducir Sonido')  # Etiqueta de Pista (Track Label)
   etiqueta_pista <= boton_pista

   slider_volumen = html.INPUT(type='range', min='0', max='1', step='0.1')
   slider_volumen.bind('input', panel_sonido.cambiar_volumen)

   etiqueta_volumen = html.LABEL('Volumen')  # Etiqueta de Volumen (Volume Label)
   etiqueta_volumen <= slider_volumen

   contenedor_app <= panel_sonido.pista
   contenedor_app <= etiqueta_pista
   contenedor_app <= etiqueta_volumen

   document <= contenedor_app

Programa principal
------------------

+ Prueba ejecutar este código en tu PC y observa cómo genera dinámicamente paneles de sonido para archivos WAV en tu directorio.

.. code-block :: python

   from tkinter import *
   from sound_panel import *
   import pygame.mixer
   import os

   app = Tk()
   app.title("Head First Mix")

   mixer = pygame.mixer
   mixer.init()

   dirList = os.listdir(".")
   for fname in dirList:
      if fname.endswith(".wav") and fname[0] in '345':
         SoundPanel(app,mixer,fname).pack()

   def shutdown():
      mixer.stop()
      app.destroy()

   app.protocol("WM_DELETE_WINDOW",shutdown)
   app.mainloop()


+ ¡Felicidades! Ahora sabes cómo crear programas complejos con poco código.


.. image:: ../img/TWP58_010.png
   :height: 14.125cm
   :width: 19.746cm
   :align: center
   :alt: 


.. image:: ../img/TWP58_011.png
   :height: 5.45cm
   :width: 3.91cm
   :align: center
   :alt: 


Recuerda
--------

+ Las clases son fábricas de objetos
+ Classe = métodos + datos
+ Crear objetos =  instanciar una clase
+ class – comienza la definición de una clase
+ self – autoasignado al objeto actual
+ __init__() Se llama al crear el objeto

.. poll:: TWP58
   :scale: 3
   :allowcomment:

   En una escala del 1 (a mejorar) al 3 (excelente), 
   ¿cómo calificaría este capítulo?

