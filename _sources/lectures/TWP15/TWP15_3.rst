Contadores
==========

+ Ahora imprima de 1 a un número ingresado por el usuario

.. activecode:: ac_l15_3a

   :stdin:

   fin = int(input("Ingrese el último número: "))
   x = 1
   while x <= fin:
       print(x)
       x = x + 1

+ Imprima números pares entre 0 y un número dado por el usuario usando ``if``

.. activecode:: ac_l15_3b

   :stdin:

   fin = int(input("Ingrese el último número: "))
   x = 0
   while x <= fin:
       if x%2 == 0:
           print(x)
       x = x + 1


+ Imprima números pares entre 0 y un número proporcionado sin usar
  ``if``

.. activecode:: ac_l15_3c
   :nocodelens:
   :stdin:

   fin = int(input("Ingrese el último número: "))
   x = 0
   while x <= fin:
       print(x)
       x = x + 2


Algunos ejercicios
------------------

.. activecode:: ac_l15_3d
   :nocodelens:

   Modifique el programa anterior para imprimir del 1 al número ingresado por el usuario, 
   pero esta vez solo los números impares.
   
   ~~~~
   def print_odd_numbers(n):


   ====
   from unittest.gui import TestCaseGui


   class myTests(TestCaseGui):
      def testOne(self):
         self.assertEqual(print_odd_numbers(10), [1, 3, 5, 7, 9], "Esperado [1, 3, 5, 7, 9]")
         self.assertEqual(print_odd_numbers(1), [1], "Esperado [1]")
         self.assertEqual(print_odd_numbers(0), [], "Esperado []")

   myTests().main()


.. activecode:: ac_l15_3e
   :nocodelens:

   Escriba un programa que imprima los primeros 10 múltiplos de 3.
   
   ~~~~
   def print_multiples_of_3():

   ====
   from unittest.gui import TestCaseGui


   class myTests(TestCaseGui):
      def testOne(self):
         self.assertEqual(print_multiples_of_3(), [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], "Esperado [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]")

   myTests().main()
