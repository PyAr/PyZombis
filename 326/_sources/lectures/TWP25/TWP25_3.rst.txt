Declaración de operaciones y herencia
=====================================

+ Agregue el método ``estado_de_cuenta`` a la clase ``Cuenta`` el cual imprime una lista de las operaciones de retiro y depósito realizadas.
+ Cambie el método ``__init__`` para usar el método ``depositar`` para inicializar el saldo.


Clase Cliente y Clase Cuenta (Mejorada)
---------------------------------------

..  activecode:: ac_l25_3a
    :nocodelens:
    :stdin:

    class Cliente:
        def __init__(self, nombre, telefono):
            self.nombre = nombre
            self.telefono = telefono


    class Cuenta:
        def __init__(self, clientes, numero, saldo=0):
            self.saldo = 0
            self.clientes = clientes
            self.numero = numero
            self.operaciones = []
            self.depositar(saldo)

        def resumen(self):
            print("CC numero: %s saldo: %10.2f" % (self.numero, self.saldo))

        def retirar(self, monto):
            if self.saldo >= monto:
                self.saldo -= monto
                self.operaciones.append(["Retiro", monto])
            else:
                print("Saldo insuficiente para retirar")

        def depositar(self, monto):
            self.saldo += monto
            self.operaciones.append(["Depósito", monto])

        def estado_de_cuenta(self):
            print("extracto CC N %s" % self.numero)
            for op in self.operaciones:
                print("%10s %10.2f" % (op[0], op[1]))
            print("%10s %10.2f\n" % ("Saldo", self.saldo))


Utilizando las clases Cliente y Cuenta (Mejorada)
*************************************************

..  activecode:: ac_l25_3b
    :nocodelens:
    :stdin:
    :include: ac_l25_3a

    juan = Cliente("Juan de Silva", "777-1234")
    maria = Cliente("Maria de Silva", "555-4321")
    cuenta_1 = Cuenta([juan], 1, 1000)
    cuenta_2 = Cuenta([maria, juan], 2, 500)

    cuenta_1.retirar(50)
    cuenta_2.depositar(300)
    cuenta_1.retirar(190)
    cuenta_2.depositar(95.15)
    cuenta_2.retirar(250)

    cuenta_1.estado_de_cuenta()
    cuenta_2.estado_de_cuenta()

Herencia
--------

+ La herencia en objetos permite modificar nuestras clases, agregando o modificando atributos y métodos, basados en la clase anterior.
+ Vamos a crear cuentas especiales, donde podemos retirar más dinero que el saldo, hasta cierto límite.
+ Las operaciones de depósito, retiro y resumen continúan como una cuenta normal.


Clase Cuenta Especial
---------------------

..  activecode:: ac_l25_3c
    :nocodelens:
    :stdin:
    :include: ac_l25_3a

    class CuentaEspecial(Cuenta):
        def __init__(self, clientes, numero, saldo=0, limite=0):
            Cuenta.__init__(self, clientes, numero, saldo)
            self.limite = limite

        def retirar(self, monto):
            if self.saldo + self.limite >= monto:
                self.saldo -= monto
                self.operaciones.append(["Retiro", monto])
            else:
                print("Saldo insuficiente para retirar")


+ Tenga en cuenta que escribimos ``Cuenta`` entre paréntesis.
+ ``CuentaEspecial`` hereda los métodos y atributos de ``Cuenta``.
+ ``self.limite`` se creará solo para clases de tipo ``CuentaEspecial``.
+ Tenga en cuenta que estamos sobre escribiendo completamente el método ``retirar`` en ``CuentaEspecial``.

Ventajas de la herencia
-----------------------

+ Hemos modificado muy poco nuestro programa, manteniendo la funcionalidad anterior y agregando nuevas características.
+ Fue posible reutilizar los métodos de la cuenta.
+ Por lo tanto, la definición de la clase ``CuentaEspecial`` fue mucho más simple, incluyendo solo el comportamiento diferente.

Utilizando todas las clases
---------------------------

..  activecode:: ac_l25_3d
    :nocodelens:
    :stdin:
    :include: ac_l25_3a, ac_l25_3c

    juan = Cliente("Juan de Silva", "777-1234")
    maria = Cliente("Maria de Silva", "555-4321")
    cuenta_1 = Cuenta([juan], 1, 1000)
    cuenta_2 = CuentaEspecial([maria, juan], 2, 500, 1000)

    cuenta_1.retirar(50)
    cuenta_2.depositar(300)
    cuenta_1.retirar(190)
    cuenta_2.depositar(95.15)
    cuenta_2.retirar(1500)

    cuenta_1.estado_de_cuenta()
    cuenta_2.estado_de_cuenta()
