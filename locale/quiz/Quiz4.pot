# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Python Argentina et al.
# This file is distributed under the same license as the Python para Zombis package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python para Zombis c197793c\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-25 13:47-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../_sources/quiz/Quiz4.rst:3
msgid "Quiz - 4"
msgstr ""

#: ../_sources/quiz/Quiz4.rst:17
msgid "Desarrolle la función ``valores_extremos`` que tome el parámetro ``numeros``, que representa una lista de **10** números aleatorios entre 0-100. La función debe devolver una tupla ``(a, b)``, donde a y b son el valor máximo y el mínimo respectivamente de la lista ``numeros``. Resuelva el problema sin usar las funciones ``max`` ni ``min``. |br| |br| Ejemplo: |br| ``valores_extremos([15, 48, 0, 27, 13, 62, 32, 57, 85, 18])`` -> ``(85, 0)`` |br|"
msgstr ""

#: ../_sources/quiz/Quiz4.rst:60
msgid "Desarrolle la función ``pares_e_impares`` que toma a ``numeros`` como parámetro. ``numeros`` representa una lista de **20** números aleatorios entre 1-100. La función debe devolver una tupla de listas de la forma ``([par], [impar])``, donde par e impar sean listas de números pares e impares que se encuentran en ``numeros``, respectivamente. |br| |br|"
msgstr ""

#: ../_sources/quiz/Quiz4.rst:107
msgid "Desarrolle la función ``intercalar_listas`` que toma dos parámetros, ``l1`` y ``l2``, representando listas de **10** números aleatorios entre 1-100. La función debe generar una tercer lista compuesta de los elementos de ``l1`` y ``l2`` intercalados. Esta tercera lista será devuelta. |br| |br| Ejemplo: |br| ``intercalar_listas([1, 3, 5, .....], [2, 4, 6, ....])`` -> ``[1, 2, 3, 4, 5, 6, ....]`` |br|"
msgstr ""

#: ../_sources/quiz/Quiz4.rst:149
msgid "A la función ``buscar_palabras`` se le pasará como argumento el siguiente ``texto``: |br| *\"The Python Software Foundation and the global Python community welcome and encourage participation by everyone. Our community is based on mutual respect, tolerance, and encouragement, and we are working to help each other live up to these principles. We want our community to be more diverse: whoever you are, and whatever your background, we welcome you.\"* |br| Lo que debe hacer es generar una lista de palabras de este texto utilizando ``split()``. Después debe crear una lista de palabras que comienzan o terminan con alguna de las letras en la cadena ``\"python\"``. Esta lista es la que será devuelta. **Nota**: No olvide primero eliminar los caracteres especiales y tenga cuidado con las mayúsculas. |br| |br|"
msgstr ""

#: ../_sources/quiz/Quiz4.rst:188
msgid "Ahora va a desarrollar la función ``buscar_palabras_2``, a la que se le pasará el texto anterior como parámetro. Una vez más va a separar el texto en palabras, justo como lo hizo en el *Ejercicio 4*. Esta vez, debe calcular el número de palabras dentro de ``texto`` que tienen alguna de las letras de la cadena ``\"python\"``, y además tienen una longitud mayor a 4 caracteres. |br| |br|"
msgstr ""
